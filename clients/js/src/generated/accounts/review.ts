/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type Review = Account<ReviewAccountData>;

export type ReviewAccountData = {
  key: Key;
  stars: number;
  createdAt: bigint;
  updatedAt: bigint;
  reviewer: PublicKey;
  domain: PublicKey;
  comment: string;
};

export type ReviewAccountDataArgs = {
  stars: number;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  reviewer: PublicKey;
  domain: PublicKey;
  comment: string;
};

export function getReviewAccountDataSerializer(): Serializer<
  ReviewAccountDataArgs,
  ReviewAccountData
> {
  return mapSerializer<ReviewAccountDataArgs, any, ReviewAccountData>(
    struct<ReviewAccountData>(
      [
        ['key', getKeySerializer()],
        ['stars', u8()],
        ['createdAt', i64()],
        ['updatedAt', i64()],
        ['reviewer', publicKeySerializer()],
        ['domain', publicKeySerializer()],
        ['comment', string()],
      ],
      { description: 'ReviewAccountData' }
    ),
    (value) => ({ ...value, key: Key.Review })
  ) as Serializer<ReviewAccountDataArgs, ReviewAccountData>;
}

export function deserializeReview(rawAccount: RpcAccount): Review {
  return deserializeAccount(rawAccount, getReviewAccountDataSerializer());
}

export async function fetchReview(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Review> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Review');
  return deserializeReview(maybeAccount);
}

export async function safeFetchReview(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Review | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeReview(maybeAccount) : null;
}

export async function fetchAllReview(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Review[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Review');
    return deserializeReview(maybeAccount);
  });
}

export async function safeFetchAllReview(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Review[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeReview(maybeAccount as RpcAccount));
}

export function getReviewGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'lorisTrustpilot',
    '6BvjJHhheqrQpNFkYKAMtd1B7FPTBpxp1QncnwsH3mE7'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      stars: number;
      createdAt: number | bigint;
      updatedAt: number | bigint;
      reviewer: PublicKey;
      domain: PublicKey;
      comment: string;
    }>({
      key: [0, getKeySerializer()],
      stars: [1, u8()],
      createdAt: [2, i64()],
      updatedAt: [10, i64()],
      reviewer: [18, publicKeySerializer()],
      domain: [50, publicKeySerializer()],
      comment: [82, string()],
    })
    .deserializeUsing<Review>((account) => deserializeReview(account))
    .whereField('key', Key.Review);
}

export function findReviewPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The domain PDA */
    domain: PublicKey;
    /** The wallet reviewing the domain */
    reviewer: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'lorisTrustpilot',
    '6BvjJHhheqrQpNFkYKAMtd1B7FPTBpxp1QncnwsH3mE7'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('review'),
    publicKeySerializer().serialize(seeds.domain),
    publicKeySerializer().serialize(seeds.reviewer),
  ]);
}

export async function fetchReviewFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findReviewPda>[1],
  options?: RpcGetAccountOptions
): Promise<Review> {
  return fetchReview(context, findReviewPda(context, seeds), options);
}

export async function safeFetchReviewFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findReviewPda>[1],
  options?: RpcGetAccountOptions
): Promise<Review | null> {
  return safeFetchReview(context, findReviewPda(context, seeds), options);
}
